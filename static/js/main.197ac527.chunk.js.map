{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuid","v4","TextField","name","type","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAmCeA,MA/Bf,YAA8B,IAAXC,EAAU,EAAVA,QAAU,EACDC,mBAAS,CAC7BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJU,mBAClBC,EADkB,KACZC,EADY,KAmBzB,OACI,uBAAMC,UAAU,WAAWC,SAT/B,SAAsBC,GAClBA,EAAEC,iBACEL,EAAKF,KAAKQ,SACVX,EAAQ,2BAAKK,GAAN,IAAYH,GAAIU,IAAKC,MAC5BP,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,QAK7B,UACI,cAACW,EAAA,EAAD,CACIC,KAAK,OACLC,KAAK,OACLC,MAAOZ,EAAKF,KACZe,SAlBZ,SAA+BT,GAC3BH,EAAQ,2BAAKD,GAAN,IAAYF,KAAMM,EAAEU,OAAOF,YAkB9B,cAACG,EAAA,EAAD,CAAQJ,KAAK,SAAb,wB,qDCLGK,MArBf,YAAmD,IAApChB,EAAmC,EAAnCA,KAAMiB,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,WASrC,OACI,eAACC,EAAA,EAAD,CAAUC,MAAO,CAACC,QAAS,QAA3B,UACI,cAACC,EAAA,EAAD,CAAUC,QAASvB,EAAKD,UAAWyB,QAVvC,WACIP,EAAejB,EAAKH,OAUpB,cAAC4B,EAAA,EAAD,CACIC,QAAQ,QACRN,MAAO,CAACO,eAAgB3B,EAAKD,UAAY,eAAgB,MAF7D,SAGEC,EAAKF,OACP,cAAC8B,EAAA,EAAD,CAAYJ,QAXhB,WACIN,EAAWlB,EAAKH,KAUhB,SAAmC,cAAC,IAAD,U,SCA5BgC,MAdf,YAAyD,IAAtCC,EAAqC,EAArCA,MAAOb,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WACtC,OACI,cAACa,EAAA,EAAD,UACKD,EAAME,KAAI,SAAAhC,GAAI,OACX,cAAC,EAAD,CAEAA,KAAMA,EACNiB,eAAgBA,EAChBC,WAAYA,GAHPlB,EAAKH,UCLpBoC,EAAoB,wBAoDXC,MAlDf,WAAgB,IAAD,EACatC,mBAAS,IADtB,mBACNkC,EADM,KACCK,EADD,KAoCb,OAjCAC,qBAAU,WACR,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQR,IACjDI,GACFF,EAASE,KAEV,IAEHD,qBAAU,WACRI,aAAaE,QAAQT,EAAmBK,KAAKK,UAAUb,MACtD,CAACA,IAyBF,sBAAK5B,UAAU,MAAf,UAEI,cAACuB,EAAA,EAAD,CAAYC,QAAQ,KAApB,uBACA,cAAC,EAAD,CAAU/B,QA1BhB,SAAiBK,GACfmC,EAAS,CAACnC,GAAF,mBAAW8B,QA0Bf,cAAC,EAAD,CACAA,MAAOA,EACPb,eAzBN,SAAwBpB,GACtBsC,EACEL,EAAME,KAAI,SAAAhC,GACR,OAAGA,EAAKH,KAAOA,EACN,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAGdC,OAiBPkB,WAZN,SAAoBrB,GAClBsC,EAASL,EAAMc,QAAO,SAAA5C,GAAI,OAAIA,EAAKH,KAAMA,aC7B9BgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.197ac527.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport uuid from \"uuid/v4\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\nfunction TodoForm({addTodo}) {\r\n    const [todo, setTodo] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        completed: false\r\n    });\r\n\r\n    function handleTaskInputChange(e) {\r\n        setTodo({ ...todo, task: e.target.value });\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        if (todo.task.trim()) {\r\n            addTodo({ ...todo, id: uuid.v4 });\r\n            setTodo({ ...todo, task: \"\" });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"todoform\" onSubmit={handleSubmit}>\r\n            <TextField\r\n                name=\"task\"\r\n                type=\"text\"\r\n                value={todo.task}\r\n                onChange={handleTaskInputChange} />\r\n            <Button type=\"submit\">submit</Button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport {Checkbox, IconButton, ListItem, Typography} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nfunction Todo({todo, toggleComplete, removeTodo}) {\r\n    function handleCheckbox() {\r\n        toggleComplete(todo.id);\r\n    }\r\n\r\n    function handleRemove() {\r\n        removeTodo(todo.id);\r\n    }\r\n\r\nreturn (\r\n    <ListItem style={{display: \"flex\"}}>\r\n        <Checkbox checked={todo.completed} onClick={handleCheckbox} />\r\n        <Typography\r\n            variant=\"body1\"\r\n            style={{textDecoration: todo.completed ? \"line-through\": null}}\r\n        >{todo.task}</Typography>\r\n        <IconButton onClick={handleRemove}><CloseIcon/></IconButton>\r\n    </ListItem>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport {List} from \"@material-ui/core\";\r\n\r\n\r\n\r\nfunction TodoList({todos, toggleComplete, removeTodo }) {\r\n    return(\r\n        <List>\r\n            {todos.map(todo => (\r\n                <Todo \r\n                key={todo.id} \r\n                todo={todo} \r\n                toggleComplete={toggleComplete} \r\n                removeTodo={removeTodo} />\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(()=> {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(()=> {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map(todo => {\n        if(todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id){\n    setTodos(todos.filter(todo => todo.id !==id));\n  }\n\n  return (\n    <div className=\"App\">\n      \n        <Typography variant=\"h2\">Todo List</Typography>\n        <TodoForm addTodo={addTodo} />\n        <TodoList \n        todos={todos} \n        toggleComplete={toggleComplete}\n        removeTodo={removeTodo} />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}